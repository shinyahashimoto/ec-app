type User {
  id: ID!
  name: String!
  email: String
  password: String
  role: String
  carts(filter: ModelCartFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCartConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Cart {
  id: ID!
  added_at: AWSDateTime
  description: String
  gender: String
  images: String
  name: String
  price: Int!
  productId: ID!
  quantity: Int
  size: String
  user: User
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Product {
  id: ID!
  name: String!
  category: String!
  description: String!
  price: Int!
  gender: String!
  sizes(filter: ModelSizeFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSizeConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Size {
  id: ID!
  productId: ID!
  size: String!
  quantity: Int!
  product: Product
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  email: ModelStringInput
  password: ModelStringInput
  role: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getCart(id: ID!): Cart
  listCarts(filter: ModelCartFilterInput, limit: Int, nextToken: String): ModelCartConnection
  getProduct(id: ID!): Product
  listProducts(filter: ModelProductFilterInput, limit: Int, nextToken: String): ModelProductConnection
  getSize(id: ID!): Size
  listSizes(filter: ModelSizeFilterInput, limit: Int, nextToken: String): ModelSizeConnection
}

input CreateUserInput {
  id: ID
  name: String!
  email: String
  password: String
  role: String
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  password: String
  role: String
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createCart(input: CreateCartInput!, condition: ModelCartConditionInput): Cart
  updateCart(input: UpdateCartInput!, condition: ModelCartConditionInput): Cart
  deleteCart(input: DeleteCartInput!, condition: ModelCartConditionInput): Cart
  createProduct(input: CreateProductInput!, condition: ModelProductConditionInput): Product
  updateProduct(input: UpdateProductInput!, condition: ModelProductConditionInput): Product
  deleteProduct(input: DeleteProductInput!, condition: ModelProductConditionInput): Product
  createSize(input: CreateSizeInput!, condition: ModelSizeConditionInput): Size
  updateSize(input: UpdateSizeInput!, condition: ModelSizeConditionInput): Size
  deleteSize(input: DeleteSizeInput!, condition: ModelSizeConditionInput): Size
}

input ModelUserConditionInput {
  name: ModelStringInput
  email: ModelStringInput
  password: ModelStringInput
  role: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateCart: Cart @aws_subscribe(mutations: ["createCart"])
  onUpdateCart: Cart @aws_subscribe(mutations: ["updateCart"])
  onDeleteCart: Cart @aws_subscribe(mutations: ["deleteCart"])
  onCreateProduct: Product @aws_subscribe(mutations: ["createProduct"])
  onUpdateProduct: Product @aws_subscribe(mutations: ["updateProduct"])
  onDeleteProduct: Product @aws_subscribe(mutations: ["deleteProduct"])
  onCreateSize: Size @aws_subscribe(mutations: ["createSize"])
  onUpdateSize: Size @aws_subscribe(mutations: ["updateSize"])
  onDeleteSize: Size @aws_subscribe(mutations: ["deleteSize"])
}

type ModelCartConnection {
  items: [Cart]
  nextToken: String
}

input ModelCartFilterInput {
  id: ModelIDInput
  added_at: ModelStringInput
  description: ModelStringInput
  gender: ModelStringInput
  images: ModelStringInput
  name: ModelStringInput
  price: ModelIntInput
  productId: ModelIDInput
  quantity: ModelIntInput
  size: ModelStringInput
  and: [ModelCartFilterInput]
  or: [ModelCartFilterInput]
  not: ModelCartFilterInput
}

input CreateCartInput {
  id: ID
  added_at: AWSDateTime
  description: String
  gender: String
  images: String
  name: String
  price: Int!
  productId: ID!
  quantity: Int
  size: String
  cartUserId: ID
}

input UpdateCartInput {
  id: ID!
  added_at: AWSDateTime
  description: String
  gender: String
  images: String
  name: String
  price: Int
  productId: ID
  quantity: Int
  size: String
  cartUserId: ID
}

input DeleteCartInput {
  id: ID
}

input ModelCartConditionInput {
  added_at: ModelStringInput
  description: ModelStringInput
  gender: ModelStringInput
  images: ModelStringInput
  name: ModelStringInput
  price: ModelIntInput
  productId: ModelIDInput
  quantity: ModelIntInput
  size: ModelStringInput
  and: [ModelCartConditionInput]
  or: [ModelCartConditionInput]
  not: ModelCartConditionInput
}

type ModelProductConnection {
  items: [Product]
  nextToken: String
}

input ModelProductFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  category: ModelStringInput
  description: ModelStringInput
  price: ModelIntInput
  gender: ModelStringInput
  and: [ModelProductFilterInput]
  or: [ModelProductFilterInput]
  not: ModelProductFilterInput
}

input CreateProductInput {
  id: ID
  name: String!
  category: String!
  description: String!
  price: Int!
  gender: String!
}

input UpdateProductInput {
  id: ID!
  name: String
  category: String
  description: String
  price: Int
  gender: String
}

input DeleteProductInput {
  id: ID
}

input ModelProductConditionInput {
  name: ModelStringInput
  category: ModelStringInput
  description: ModelStringInput
  price: ModelIntInput
  gender: ModelStringInput
  and: [ModelProductConditionInput]
  or: [ModelProductConditionInput]
  not: ModelProductConditionInput
}

type ModelSizeConnection {
  items: [Size]
  nextToken: String
}

input ModelSizeFilterInput {
  id: ModelIDInput
  productId: ModelIDInput
  size: ModelStringInput
  quantity: ModelIntInput
  and: [ModelSizeFilterInput]
  or: [ModelSizeFilterInput]
  not: ModelSizeFilterInput
}

input CreateSizeInput {
  id: ID
  productId: ID!
  size: String!
  quantity: Int!
  sizeProductId: ID
}

input UpdateSizeInput {
  id: ID!
  productId: ID
  size: String
  quantity: Int
  sizeProductId: ID
}

input DeleteSizeInput {
  id: ID
}

input ModelSizeConditionInput {
  productId: ModelIDInput
  size: ModelStringInput
  quantity: ModelIntInput
  and: [ModelSizeConditionInput]
  or: [ModelSizeConditionInput]
  not: ModelSizeConditionInput
}
